[
  {
    "objectID": "core/metadata.html",
    "href": "core/metadata.html",
    "title": "Metadata",
    "section": "",
    "text": "For plugins that execute on remote/cloud resources, we track information about those resources.\n\nsource\n\n\n\n RemoteResourceInfo\n                     (provider:cjm_fasthtml_plugins.core.execution_mode.Cl\n                     oudProviderType, region:Optional[str]=None,\n                     instance_id:Optional[str]=None,\n                     job_id:Optional[str]=None,\n                     endpoint_url:Optional[str]=None,\n                     ssh_host:Optional[str]=None, ssh_port:int=22,\n                     status:str='unknown',\n                     resource_type:Optional[str]=None, gpu_count:int=0,\n                     gpu_type:Optional[str]=None,\n                     estimated_cost_per_hour:Optional[float]=None,\n                     metadata:Dict[str,Any]=&lt;factory&gt;)\n\nInformation about a remote/cloud resource used by a plugin.\n\n# Example: Create remote resource info for AWS instance\naws_resource = RemoteResourceInfo(\n    provider=CloudProviderType.AWS,\n    region=\"us-west-2\",\n    instance_id=\"i-1234567890abcdef\",\n    resource_type=\"p3.8xlarge\",\n    gpu_count=4,\n    gpu_type=\"V100\",\n    status=\"running\",\n    estimated_cost_per_hour=12.24,\n    ssh_host=\"54.123.45.67\"\n)\n\nprint(f\"Provider: {aws_resource.provider.value}\")\nprint(f\"Instance: {aws_resource.instance_id}\")\nprint(f\"GPUs: {aws_resource.gpu_count}x {aws_resource.gpu_type}\")\nprint(f\"Cost: ${aws_resource.estimated_cost_per_hour}/hour\")\n\nProvider: aws\nInstance: i-1234567890abcdef\nGPUs: 4x V100\nCost: $12.24/hour\n\n\n\n# Example: Create remote resource info for Lambda Labs\nlambda_resource = RemoteResourceInfo(\n    provider=CloudProviderType.LAMBDA_LABS,\n    instance_id=\"0x1a2b3c4d\",\n    resource_type=\"4x_A100\",\n    gpu_count=4,\n    gpu_type=\"A100\",\n    status=\"provisioning\",\n    estimated_cost_per_hour=4.40,\n    region=\"us-west-1\"\n)\n\nprint(f\"Provider: {lambda_resource.provider.value}\")\nprint(f\"Status: {lambda_resource.status}\")\nprint(f\"Configuration: {lambda_resource.resource_type}\")\n\nProvider: lambda_labs\nStatus: provisioning\nConfiguration: 4x_A100",
    "crumbs": [
      "core",
      "Metadata"
    ]
  },
  {
    "objectID": "core/metadata.html#remote-resource-information",
    "href": "core/metadata.html#remote-resource-information",
    "title": "Metadata",
    "section": "",
    "text": "For plugins that execute on remote/cloud resources, we track information about those resources.\n\nsource\n\n\n\n RemoteResourceInfo\n                     (provider:cjm_fasthtml_plugins.core.execution_mode.Cl\n                     oudProviderType, region:Optional[str]=None,\n                     instance_id:Optional[str]=None,\n                     job_id:Optional[str]=None,\n                     endpoint_url:Optional[str]=None,\n                     ssh_host:Optional[str]=None, ssh_port:int=22,\n                     status:str='unknown',\n                     resource_type:Optional[str]=None, gpu_count:int=0,\n                     gpu_type:Optional[str]=None,\n                     estimated_cost_per_hour:Optional[float]=None,\n                     metadata:Dict[str,Any]=&lt;factory&gt;)\n\nInformation about a remote/cloud resource used by a plugin.\n\n# Example: Create remote resource info for AWS instance\naws_resource = RemoteResourceInfo(\n    provider=CloudProviderType.AWS,\n    region=\"us-west-2\",\n    instance_id=\"i-1234567890abcdef\",\n    resource_type=\"p3.8xlarge\",\n    gpu_count=4,\n    gpu_type=\"V100\",\n    status=\"running\",\n    estimated_cost_per_hour=12.24,\n    ssh_host=\"54.123.45.67\"\n)\n\nprint(f\"Provider: {aws_resource.provider.value}\")\nprint(f\"Instance: {aws_resource.instance_id}\")\nprint(f\"GPUs: {aws_resource.gpu_count}x {aws_resource.gpu_type}\")\nprint(f\"Cost: ${aws_resource.estimated_cost_per_hour}/hour\")\n\nProvider: aws\nInstance: i-1234567890abcdef\nGPUs: 4x V100\nCost: $12.24/hour\n\n\n\n# Example: Create remote resource info for Lambda Labs\nlambda_resource = RemoteResourceInfo(\n    provider=CloudProviderType.LAMBDA_LABS,\n    instance_id=\"0x1a2b3c4d\",\n    resource_type=\"4x_A100\",\n    gpu_count=4,\n    gpu_type=\"A100\",\n    status=\"provisioning\",\n    estimated_cost_per_hour=4.40,\n    region=\"us-west-1\"\n)\n\nprint(f\"Provider: {lambda_resource.provider.value}\")\nprint(f\"Status: {lambda_resource.status}\")\nprint(f\"Configuration: {lambda_resource.resource_type}\")\n\nProvider: lambda_labs\nStatus: provisioning\nConfiguration: 4x_A100",
    "crumbs": [
      "core",
      "Metadata"
    ]
  },
  {
    "objectID": "core/metadata.html#plugin-metadata",
    "href": "core/metadata.html#plugin-metadata",
    "title": "Metadata",
    "section": "Plugin Metadata",
    "text": "Plugin Metadata\nThe main metadata structure that describes a plugin and tracks its runtime state.\n\nsource\n\nPluginMetadata\n\n PluginMetadata (name:str, category:str, title:str,\n                 config_schema:Dict[str,Any],\n                 description:Optional[str]=None,\n                 version:Optional[str]=None, is_configured:bool=False, exe\n                 cution_mode:cjm_fasthtml_plugins.core.execution_mode.Plug\n                 inExecutionMode=&lt;PluginExecutionMode.IN_PROCESS:\n                 'in_process'&gt;, manages_child_processes:bool=False,\n                 manages_external_resources:bool=False,\n                 spawned_pids:List[int]=&lt;factory&gt;,\n                 container_id:Optional[str]=None,\n                 conda_env_name:Optional[str]=None, remote_resource:Option\n                 al[__main__.RemoteResourceInfo]=None)\n\nMetadata describing a plugin for display and resource management without loading the plugin instance.\n\n# Example: Create simple in-process plugin metadata\nsimple_plugin = PluginMetadata(\n    name=\"whisper_tiny\",\n    category=\"transcription\",\n    title=\"Whisper Tiny Model\",\n    config_schema={\n        \"type\": \"object\",\n        \"properties\": {\n            \"device\": {\"type\": \"string\", \"enum\": [\"cpu\", \"cuda\"], \"default\": \"cpu\"}\n        }\n    },\n    version=\"1.0.0\",\n    is_configured=True\n)\n\nprint(f\"Plugin: {simple_plugin.title}\")\nprint(f\"Unique ID: {simple_plugin.get_unique_id()}\")\nprint(f\"Execution mode: {simple_plugin.execution_mode.value}\")\nprint(f\"Is local: {simple_plugin.is_local_execution()}\")\nprint(f\"Has active resources: {simple_plugin.has_active_resources()}\")\n\nPlugin: Whisper Tiny Model\nUnique ID: transcription_whisper_tiny\nExecution mode: in_process\nIs local: True\nHas active resources: False\n\n\n\n# Example: Create plugin with subprocess (vLLM-style)\nvllm_plugin = PluginMetadata(\n    name=\"voxtral_vllm\",\n    category=\"transcription\",\n    title=\"Voxtral via vLLM Server\",\n    config_schema={\"type\": \"object\", \"properties\": {}},\n    execution_mode=PluginExecutionMode.SUBPROCESS,\n    manages_child_processes=True,\n    manages_external_resources=True,\n    spawned_pids=[54321, 54322, 54323]\n)\n\nprint(f\"Plugin: {vllm_plugin.title}\")\nprint(f\"Execution mode: {vllm_plugin.execution_mode.value}\")\nprint(f\"Manages child processes: {vllm_plugin.manages_child_processes}\")\nprint(f\"Spawned PIDs: {vllm_plugin.spawned_pids}\")\nprint(f\"Has active resources: {vllm_plugin.has_active_resources()}\")\n\nPlugin: Voxtral via vLLM Server\nExecution mode: subprocess\nManages child processes: True\nSpawned PIDs: [54321, 54322, 54323]\nHas active resources: True\n\n\n\n# Example: Create cloud-based plugin\ncloud_plugin = PluginMetadata(\n    name=\"llm_finetune_aws\",\n    category=\"finetuning\",\n    title=\"AWS LLM Finetuning\",\n    config_schema={\"type\": \"object\", \"properties\": {}},\n    execution_mode=PluginExecutionMode.CLOUD_GPU,\n    manages_external_resources=True,\n    remote_resource=RemoteResourceInfo(\n        provider=CloudProviderType.AWS,\n        instance_id=\"i-abcd1234\",\n        status=\"running\",\n        gpu_count=8,\n        gpu_type=\"A100\",\n        estimated_cost_per_hour=24.50\n    )\n)\n\nprint(f\"Plugin: {cloud_plugin.title}\")\nprint(f\"Execution mode: {cloud_plugin.execution_mode.value}\")\nprint(f\"Is cloud: {cloud_plugin.is_cloud_execution()}\")\nprint(f\"Provider: {cloud_plugin.remote_resource.provider.value}\")\nprint(f\"Instance: {cloud_plugin.remote_resource.instance_id}\")\nprint(f\"Cost: ${cloud_plugin.remote_resource.estimated_cost_per_hour}/hour\")\nprint(f\"Has active resources: {cloud_plugin.has_active_resources()}\")\n\nPlugin: AWS LLM Finetuning\nExecution mode: cloud_gpu\nIs cloud: True\nProvider: aws\nInstance: i-abcd1234\nCost: $24.5/hour\nHas active resources: True",
    "crumbs": [
      "core",
      "Metadata"
    ]
  },
  {
    "objectID": "core/registry.html",
    "href": "core/registry.html",
    "title": "Registry",
    "section": "",
    "text": "The UnifiedPluginRegistry manages multiple domain-specific plugin systems (transcription, LLM, image generation, etc.) in a single application. It provides:\n\nString-based categories (no hardcoded enums)\nConfiguration persistence (JSON files)\nIntegration with FastHTML settings and resource management\nSupport for local and cloud plugins\n\nThis registry works with any plugin system built on cjm-plugin-system.\n\nsource\n\n\n\n UnifiedPluginRegistry (config_dir:Optional[pathlib.Path]=None)\n\nUnified registry for multiple domain-specific plugin systems with configuration persistence.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nconfig_dir\nOptional\nNone\nDirectory for plugin configuration files (default: ‘configs’)",
    "crumbs": [
      "core",
      "Registry"
    ]
  },
  {
    "objectID": "core/registry.html#unified-plugin-registry",
    "href": "core/registry.html#unified-plugin-registry",
    "title": "Registry",
    "section": "",
    "text": "The UnifiedPluginRegistry manages multiple domain-specific plugin systems (transcription, LLM, image generation, etc.) in a single application. It provides:\n\nString-based categories (no hardcoded enums)\nConfiguration persistence (JSON files)\nIntegration with FastHTML settings and resource management\nSupport for local and cloud plugins\n\nThis registry works with any plugin system built on cjm-plugin-system.\n\nsource\n\n\n\n UnifiedPluginRegistry (config_dir:Optional[pathlib.Path]=None)\n\nUnified registry for multiple domain-specific plugin systems with configuration persistence.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nconfig_dir\nOptional\nNone\nDirectory for plugin configuration files (default: ‘configs’)",
    "crumbs": [
      "core",
      "Registry"
    ]
  },
  {
    "objectID": "core/registry.html#example-usage",
    "href": "core/registry.html#example-usage",
    "title": "Registry",
    "section": "Example Usage",
    "text": "Example Usage\n\n# Create a mock plugin manager for testing\nfrom dataclasses import dataclass\n\n@dataclass\nclass MockPluginData:\n    name: str\n    version: str\n\nclass MockPluginManager:\n    \"\"\"Mock plugin manager for testing.\"\"\"\n    \n    def discover_plugins(self):\n        return [\n            MockPluginData(\"whisper_tiny\", \"1.0.0\"),\n            MockPluginData(\"whisper_base\", \"1.0.0\")\n        ]\n    \n    def get_plugin_config_schema(self, name: str):\n        return {\n            \"type\": \"object\",\n            \"title\": f\"{name.replace('_', ' ').title()} Configuration\",\n            \"description\": f\"Configuration for {name}\",\n            \"properties\": {\n                \"device\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"cpu\", \"cuda\"],\n                    \"default\": \"cpu\"\n                }\n            }\n        }\n\n\n# Example: Create registry and register a plugin manager\nimport tempfile\n\nwith tempfile.TemporaryDirectory() as tmpdir:\n    registry = UnifiedPluginRegistry(config_dir=Path(tmpdir))\n    \n    # Register transcription plugin manager\n    mock_manager = MockPluginManager()\n    discovered = registry.register_plugin_manager(\n        category=\"transcription\",\n        manager=mock_manager,\n        display_name=\"Transcription Plugins\"\n    )\n    \n    print(f\"Discovered {len(discovered)} plugins\")\n    for plugin in discovered:\n        print(f\"  - {plugin.title} (v{plugin.version})\")\n\nDiscovered 2 plugins\n  - Whisper Tiny Configuration (v1.0.0)\n  - Whisper Base Configuration (v1.0.0)\n\n\n\n# Example: Query registry\nwith tempfile.TemporaryDirectory() as tmpdir:\n    registry = UnifiedPluginRegistry(config_dir=Path(tmpdir))\n    registry.register_plugin_manager(\"transcription\", MockPluginManager())\n    \n    # Get categories\n    print(f\"Categories: {registry.get_categories()}\")\n    print(f\"Categories with plugins: {registry.get_categories_with_plugins()}\")\n    \n    # Get plugins\n    plugins = registry.get_plugins_by_category(\"transcription\")\n    print(f\"\\nTranscription plugins: {len(plugins)}\")\n    for plugin in plugins:\n        print(f\"  - {plugin.name} ({plugin.get_unique_id()})\")\n    \n    # Get specific plugin\n    plugin = registry.get_plugin(\"transcription_whisper_tiny\")\n    print(f\"\\nPlugin metadata:\")\n    print(f\"  Title: {plugin.title}\")\n    print(f\"  Category: {plugin.category}\")\n    print(f\"  Is configured: {plugin.is_configured}\")\n\nCategories: ['transcription']\nCategories with plugins: ['transcription']\n\nTranscription plugins: 2\n  - whisper_tiny (transcription_whisper_tiny)\n  - whisper_base (transcription_whisper_base)\n\nPlugin metadata:\n  Title: Whisper Tiny Configuration\n  Category: transcription\n  Is configured: False\n\n\n\n# Example: Save and load plugin configuration\nwith tempfile.TemporaryDirectory() as tmpdir:\n    registry = UnifiedPluginRegistry(config_dir=Path(tmpdir))\n    registry.register_plugin_manager(\"transcription\", MockPluginManager())\n    \n    unique_id = \"transcription_whisper_tiny\"\n    \n    # Check initial state\n    plugin = registry.get_plugin(unique_id)\n    print(f\"Initially configured: {plugin.is_configured}\")\n    \n    # Save configuration\n    config = {\"device\": \"cuda\", \"model_size\": \"tiny\"}\n    success = registry.save_plugin_config(unique_id, config)\n    print(f\"Save succeeded: {success}\")\n    \n    # Check updated state\n    plugin = registry.get_plugin(unique_id)\n    print(f\"Now configured: {plugin.is_configured}\")\n    \n    # Load configuration\n    loaded_config = registry.load_plugin_config(unique_id)\n    print(f\"Loaded config: {loaded_config}\")\n    \n    # Delete configuration\n    success = registry.delete_plugin_config(unique_id)\n    print(f\"Delete succeeded: {success}\")\n    \n    # Check final state\n    plugin = registry.get_plugin(unique_id)\n    print(f\"Finally configured: {plugin.is_configured}\")\n\nInitially configured: False\nSave succeeded: True\nNow configured: True\nLoaded config: {'device': 'cuda', 'model_size': 'tiny'}\nDelete succeeded: True\nFinally configured: False\n\n\n\n# Example: Register multiple plugin managers (multi-domain)\nclass MockLLMManager:\n    def discover_plugins(self):\n        return [MockPluginData(\"llama3\", \"1.0.0\"), MockPluginData(\"gpt4\", \"1.0.0\")]\n    def get_plugin_config_schema(self, name: str):\n        return {\"type\": \"object\", \"title\": f\"{name} Config\", \"properties\": {}}\n\nwith tempfile.TemporaryDirectory() as tmpdir:\n    registry = UnifiedPluginRegistry(config_dir=Path(tmpdir))\n    \n    # Register multiple domains\n    registry.register_plugin_manager(\"transcription\", MockPluginManager())\n    registry.register_plugin_manager(\"llm\", MockLLMManager(), display_name=\"Language Models\")\n    \n    # Show all categories and plugins\n    print(\"Categories:\")\n    for category in registry.get_categories():\n        display = registry.get_category_display_name(category)\n        plugins = registry.get_plugins_by_category(category)\n        print(f\"  {display} ({category}): {len(plugins)} plugins\")\n    \n    # Show all plugins\n    print(f\"\\nTotal plugins: {len(registry.get_all_plugins())}\")\n    for plugin in registry.get_all_plugins():\n        print(f\"  - [{plugin.category}] {plugin.name}\")\n\nCategories:\n  Language Models (llm): 2 plugins\n  Transcription (transcription): 2 plugins\n\nTotal plugins: 4\n  - [transcription] whisper_tiny\n  - [transcription] whisper_base\n  - [llm] llama3\n  - [llm] gpt4",
    "crumbs": [
      "core",
      "Registry"
    ]
  },
  {
    "objectID": "protocols/lifecycle.html",
    "href": "protocols/lifecycle.html",
    "title": "Lifecycle Protocol",
    "section": "",
    "text": "This protocol defines the interface for plugins that manage external resources like: - Child processes (e.g., vLLM servers) - Docker containers - Conda environments - Remote/cloud resources\nPlugins implementing this protocol provide information about their managed resources, enabling proper resource tracking and cleanup.\n\nsource\n\n\n\n LifecycleAwarePlugin (*args, **kwargs)\n\nProtocol for plugins that manage external resources like child processes, containers, or cloud resources.",
    "crumbs": [
      "protocols",
      "Lifecycle Protocol"
    ]
  },
  {
    "objectID": "protocols/lifecycle.html#lifecycle-aware-plugin-protocol",
    "href": "protocols/lifecycle.html#lifecycle-aware-plugin-protocol",
    "title": "Lifecycle Protocol",
    "section": "",
    "text": "This protocol defines the interface for plugins that manage external resources like: - Child processes (e.g., vLLM servers) - Docker containers - Conda environments - Remote/cloud resources\nPlugins implementing this protocol provide information about their managed resources, enabling proper resource tracking and cleanup.\n\nsource\n\n\n\n LifecycleAwarePlugin (*args, **kwargs)\n\nProtocol for plugins that manage external resources like child processes, containers, or cloud resources.",
    "crumbs": [
      "protocols",
      "Lifecycle Protocol"
    ]
  },
  {
    "objectID": "protocols/lifecycle.html#example-implementation",
    "href": "protocols/lifecycle.html#example-implementation",
    "title": "Lifecycle Protocol",
    "section": "Example Implementation",
    "text": "Example Implementation\nHere’s how a plugin with a subprocess (like vLLM server) would implement this protocol:\n\n# Example: Simple subprocess-based plugin\nimport subprocess\nfrom typing import Optional\n\nclass MockVLLMPlugin:\n    \"\"\"Mock plugin that spawns a subprocess.\"\"\"\n    \n    def __init__(self):\n        self.process: Optional[subprocess.Popen] = None\n    \n    def start_server(self):\n        \"\"\"Start mock server process.\"\"\"\n        # In reality, this would start vLLM server\n        self.process = subprocess.Popen(['sleep', '3600'])\n        print(f\"Started server with PID: {self.process.pid}\")\n    \n    # Implement LifecycleAwarePlugin protocol\n    \n    def get_execution_mode(self) -&gt; PluginExecutionMode:\n        return PluginExecutionMode.SUBPROCESS\n    \n    def get_child_pids(self) -&gt; List[int]:\n        if self.process and self.process.poll() is None:\n            return [self.process.pid]\n        return []\n    \n    def get_managed_resources(self) -&gt; Dict[str, Any]:\n        return {\n            'server_url': 'http://localhost:8000',\n            'is_running': self.process is not None and self.process.poll() is None,\n            'pid': self.process.pid if self.process else None\n        }\n    \n    def force_cleanup(self) -&gt; None:\n        if self.process:\n            self.process.kill()\n            self.process.wait()\n            print(\"Killed server process\")\n\n\n# Test the mock plugin\nplugin = MockVLLMPlugin()\n\n# Check it implements the protocol\nprint(f\"Implements protocol: {isinstance(plugin, LifecycleAwarePlugin)}\")\n\n# Start server\nplugin.start_server()\n\n# Get execution mode\nprint(f\"Execution mode: {plugin.get_execution_mode().value}\")\n\n# Get child PIDs\npids = plugin.get_child_pids()\nprint(f\"Child PIDs: {pids}\")\n\n# Get managed resources\nresources = plugin.get_managed_resources()\nprint(f\"Managed resources: {resources}\")\n\n# Cleanup\nplugin.force_cleanup()\nprint(f\"After cleanup, child PIDs: {plugin.get_child_pids()}\")\n\nImplements protocol: True\nStarted server with PID: 576998\nExecution mode: subprocess\nChild PIDs: [576998]\nManaged resources: {'server_url': 'http://localhost:8000', 'is_running': True, 'pid': 576998}\nKilled server process\nAfter cleanup, child PIDs: []",
    "crumbs": [
      "protocols",
      "Lifecycle Protocol"
    ]
  },
  {
    "objectID": "protocols/lifecycle.html#helper-functions",
    "href": "protocols/lifecycle.html#helper-functions",
    "title": "Lifecycle Protocol",
    "section": "Helper Functions",
    "text": "Helper Functions\nUtilities for working with lifecycle-aware plugins.\n\nsource\n\nget_all_managed_pids\n\n get_all_managed_pids (plugin:Any)\n\nGet all PIDs managed by a plugin (including children).\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nplugin\nAny\nPlugin instance\n\n\nReturns\nList\nList of all PIDs (empty if plugin not lifecycle-aware)\n\n\n\n\nsource\n\n\nis_lifecycle_aware\n\n is_lifecycle_aware (plugin:Any)\n\nCheck if a plugin implements the LifecycleAwarePlugin protocol.\n\n\n\n\nType\nDetails\n\n\n\n\nplugin\nAny\nPlugin instance to check\n\n\nReturns\nbool\nTrue if plugin implements the protocol\n\n\n\n\n# Test helper functions\nplugin = MockVLLMPlugin()\nplugin.start_server()\n\nprint(f\"Is lifecycle aware: {is_lifecycle_aware(plugin)}\")\nprint(f\"All managed PIDs: {get_all_managed_pids(plugin)}\")\n\n# Test with non-lifecycle-aware object\nregular_obj = {\"not\": \"a plugin\"}\nprint(f\"\\nDict is lifecycle aware: {is_lifecycle_aware(regular_obj)}\")\nprint(f\"Dict managed PIDs: {get_all_managed_pids(regular_obj)}\")\n\n# Cleanup\nplugin.force_cleanup()\n\nStarted server with PID: 577000\nIs lifecycle aware: True\nAll managed PIDs: [577000]\n\nDict is lifecycle aware: False\nDict managed PIDs: []\nKilled server process",
    "crumbs": [
      "protocols",
      "Lifecycle Protocol"
    ]
  },
  {
    "objectID": "components/html_ids.html",
    "href": "components/html_ids.html",
    "title": "HTML IDs",
    "section": "",
    "text": "source\n\nPluginSelectorHtmlIds\n\n PluginSelectorHtmlIds ()\n\nHTML ID constants for plugin selector components.\n\n# Example: Using the HTML ID constants\nprint(f\"Selector ID: {PluginSelectorHtmlIds.PLUGIN_SELECTOR}\")\nprint(f\"CSS Selector: {PluginSelectorHtmlIds.as_selector(PluginSelectorHtmlIds.PLUGIN_DETAILS)}\")\n\nSelector ID: plugin-selector\nCSS Selector: #plugin-details",
    "crumbs": [
      "components",
      "HTML IDs"
    ]
  },
  {
    "objectID": "utils/helpers.html",
    "href": "utils/helpers.html",
    "title": "Helpers",
    "section": "",
    "text": "source\n\n\n\n get_unconfigured_plugins\n                           (plugins:List[cjm_fasthtml_plugins.core.metadat\n                           a.PluginMetadata])\n\nGet plugins that need configuration.\n\n\n\n\nType\nDetails\n\n\n\n\nplugins\nList\nList of plugin metadata\n\n\nReturns\nList\nList of unconfigured plugins\n\n\n\n\nsource\n\n\n\n\n get_configured_plugins\n                         (plugins:List[cjm_fasthtml_plugins.core.metadata.\n                         PluginMetadata])\n\nGet plugins that have saved configuration.\n\n\n\n\nType\nDetails\n\n\n\n\nplugins\nList\nList of plugin metadata\n\n\nReturns\nList\nList of configured plugins\n\n\n\n\nsource\n\n\n\n\n get_local_plugins\n                    (plugins:List[cjm_fasthtml_plugins.core.metadata.Plugi\n                    nMetadata])\n\nGet all local execution plugins.\n\n\n\n\nType\nDetails\n\n\n\n\nplugins\nList\nList of plugin metadata\n\n\nReturns\nList\nList of local plugins\n\n\n\n\nsource\n\n\n\n\n get_cloud_plugins\n                    (plugins:List[cjm_fasthtml_plugins.core.metadata.Plugi\n                    nMetadata])\n\nGet all cloud/remote execution plugins.\n\n\n\n\nType\nDetails\n\n\n\n\nplugins\nList\nList of plugin metadata\n\n\nReturns\nList\nList of cloud/remote plugins\n\n\n\n\nsource\n\n\n\n\n filter_plugins_by_execution_mode\n                                   (plugins:List[cjm_fasthtml_plugins.core\n                                   .metadata.PluginMetadata], mode:cjm_fas\n                                   thtml_plugins.core.execution_mode.Plugi\n                                   nExecutionMode)\n\nFilter plugins by execution mode.\n\n\n\n\nType\nDetails\n\n\n\n\nplugins\nList\nList of plugin metadata\n\n\nmode\nPluginExecutionMode\nExecution mode to filter by\n\n\nReturns\nList\nFiltered list\n\n\n\n\n# Example: Create test plugins\ntest_plugins = [\n    PluginMetadata(\n        name=\"whisper_tiny\",\n        category=\"transcription\",\n        title=\"Whisper Tiny\",\n        config_schema={},\n        execution_mode=PluginExecutionMode.IN_PROCESS,\n        is_configured=True\n    ),\n    PluginMetadata(\n        name=\"voxtral_vllm\",\n        category=\"transcription\",\n        title=\"Voxtral vLLM\",\n        config_schema={},\n        execution_mode=PluginExecutionMode.SUBPROCESS,\n        is_configured=False\n    ),\n    PluginMetadata(\n        name=\"cloud_finetune\",\n        category=\"finetuning\",\n        title=\"Cloud Finetuning\",\n        config_schema={},\n        execution_mode=PluginExecutionMode.CLOUD_GPU,\n        is_configured=True\n    )\n]\n\nprint(f\"Total plugins: {len(test_plugins)}\")\n\n# Filter by execution mode\nsubprocess_plugins = filter_plugins_by_execution_mode(test_plugins, PluginExecutionMode.SUBPROCESS)\nprint(f\"Subprocess plugins: {[p.name for p in subprocess_plugins]}\")\n\n# Get cloud plugins\ncloud = get_cloud_plugins(test_plugins)\nprint(f\"Cloud plugins: {[p.name for p in cloud]}\")\n\n# Get local plugins\nlocal = get_local_plugins(test_plugins)\nprint(f\"Local plugins: {[p.name for p in local]}\")\n\n# Get configured/unconfigured\nconfigured = get_configured_plugins(test_plugins)\nunconfigured = get_unconfigured_plugins(test_plugins)\nprint(f\"Configured: {[p.name for p in configured]}\")\nprint(f\"Unconfigured: {[p.name for p in unconfigured]}\")\n\nTotal plugins: 3\nSubprocess plugins: ['voxtral_vllm']\nCloud plugins: ['cloud_finetune']\nLocal plugins: ['whisper_tiny', 'voxtral_vllm']\nConfigured: ['whisper_tiny', 'cloud_finetune']\nUnconfigured: ['voxtral_vllm']",
    "crumbs": [
      "utils",
      "Helpers"
    ]
  },
  {
    "objectID": "utils/helpers.html#plugin-filtering-and-queries",
    "href": "utils/helpers.html#plugin-filtering-and-queries",
    "title": "Helpers",
    "section": "",
    "text": "source\n\n\n\n get_unconfigured_plugins\n                           (plugins:List[cjm_fasthtml_plugins.core.metadat\n                           a.PluginMetadata])\n\nGet plugins that need configuration.\n\n\n\n\nType\nDetails\n\n\n\n\nplugins\nList\nList of plugin metadata\n\n\nReturns\nList\nList of unconfigured plugins\n\n\n\n\nsource\n\n\n\n\n get_configured_plugins\n                         (plugins:List[cjm_fasthtml_plugins.core.metadata.\n                         PluginMetadata])\n\nGet plugins that have saved configuration.\n\n\n\n\nType\nDetails\n\n\n\n\nplugins\nList\nList of plugin metadata\n\n\nReturns\nList\nList of configured plugins\n\n\n\n\nsource\n\n\n\n\n get_local_plugins\n                    (plugins:List[cjm_fasthtml_plugins.core.metadata.Plugi\n                    nMetadata])\n\nGet all local execution plugins.\n\n\n\n\nType\nDetails\n\n\n\n\nplugins\nList\nList of plugin metadata\n\n\nReturns\nList\nList of local plugins\n\n\n\n\nsource\n\n\n\n\n get_cloud_plugins\n                    (plugins:List[cjm_fasthtml_plugins.core.metadata.Plugi\n                    nMetadata])\n\nGet all cloud/remote execution plugins.\n\n\n\n\nType\nDetails\n\n\n\n\nplugins\nList\nList of plugin metadata\n\n\nReturns\nList\nList of cloud/remote plugins\n\n\n\n\nsource\n\n\n\n\n filter_plugins_by_execution_mode\n                                   (plugins:List[cjm_fasthtml_plugins.core\n                                   .metadata.PluginMetadata], mode:cjm_fas\n                                   thtml_plugins.core.execution_mode.Plugi\n                                   nExecutionMode)\n\nFilter plugins by execution mode.\n\n\n\n\nType\nDetails\n\n\n\n\nplugins\nList\nList of plugin metadata\n\n\nmode\nPluginExecutionMode\nExecution mode to filter by\n\n\nReturns\nList\nFiltered list\n\n\n\n\n# Example: Create test plugins\ntest_plugins = [\n    PluginMetadata(\n        name=\"whisper_tiny\",\n        category=\"transcription\",\n        title=\"Whisper Tiny\",\n        config_schema={},\n        execution_mode=PluginExecutionMode.IN_PROCESS,\n        is_configured=True\n    ),\n    PluginMetadata(\n        name=\"voxtral_vllm\",\n        category=\"transcription\",\n        title=\"Voxtral vLLM\",\n        config_schema={},\n        execution_mode=PluginExecutionMode.SUBPROCESS,\n        is_configured=False\n    ),\n    PluginMetadata(\n        name=\"cloud_finetune\",\n        category=\"finetuning\",\n        title=\"Cloud Finetuning\",\n        config_schema={},\n        execution_mode=PluginExecutionMode.CLOUD_GPU,\n        is_configured=True\n    )\n]\n\nprint(f\"Total plugins: {len(test_plugins)}\")\n\n# Filter by execution mode\nsubprocess_plugins = filter_plugins_by_execution_mode(test_plugins, PluginExecutionMode.SUBPROCESS)\nprint(f\"Subprocess plugins: {[p.name for p in subprocess_plugins]}\")\n\n# Get cloud plugins\ncloud = get_cloud_plugins(test_plugins)\nprint(f\"Cloud plugins: {[p.name for p in cloud]}\")\n\n# Get local plugins\nlocal = get_local_plugins(test_plugins)\nprint(f\"Local plugins: {[p.name for p in local]}\")\n\n# Get configured/unconfigured\nconfigured = get_configured_plugins(test_plugins)\nunconfigured = get_unconfigured_plugins(test_plugins)\nprint(f\"Configured: {[p.name for p in configured]}\")\nprint(f\"Unconfigured: {[p.name for p in unconfigured]}\")\n\nTotal plugins: 3\nSubprocess plugins: ['voxtral_vllm']\nCloud plugins: ['cloud_finetune']\nLocal plugins: ['whisper_tiny', 'voxtral_vllm']\nConfigured: ['whisper_tiny', 'cloud_finetune']\nUnconfigured: ['voxtral_vllm']",
    "crumbs": [
      "utils",
      "Helpers"
    ]
  },
  {
    "objectID": "utils/helpers.html#plugin-statistics",
    "href": "utils/helpers.html#plugin-statistics",
    "title": "Helpers",
    "section": "Plugin Statistics",
    "text": "Plugin Statistics\n\nsource\n\nget_plugin_stats\n\n get_plugin_stats\n                   (plugins:List[cjm_fasthtml_plugins.core.metadata.Plugin\n                   Metadata])\n\nGet statistics about a list of plugins.\n\n\n\n\nType\nDetails\n\n\n\n\nplugins\nList\nList of plugin metadata\n\n\nReturns\nDict\nDictionary with plugin statistics\n\n\n\n\n# Example: Get plugin statistics\nstats = get_plugin_stats(test_plugins)\nprint(\"Plugin Statistics:\")\nfor key, value in stats.items():\n    print(f\"  {key}: {value}\")\n\nPlugin Statistics:\n  total: 3\n  configured: 2\n  unconfigured: 1\n  local: 2\n  cloud: 1\n  with_active_resources: 0\n  by_category: {}",
    "crumbs": [
      "utils",
      "Helpers"
    ]
  },
  {
    "objectID": "components/selector.html",
    "href": "components/selector.html",
    "title": "Plugin Selector",
    "section": "",
    "text": "Functions to format plugin metadata for display.\n\nsource\n\n\n\n format_execution_mode\n                        (mode:cjm_fasthtml_plugins.core.execution_mode.Plu\n                        ginExecutionMode)\n\nFormat execution mode for display.\n\n\n\n\nType\nDetails\n\n\n\n\nmode\nPluginExecutionMode\nExecution mode enum\n\n\nReturns\nstr\nHuman-readable string\n\n\n\n\nsource\n\n\n\n\n get_execution_badge_color\n                            (mode:cjm_fasthtml_plugins.core.execution_mode\n                            .PluginExecutionMode)\n\nGet badge color for execution mode.\n\n\n\n\nType\nDetails\n\n\n\n\nmode\nPluginExecutionMode\nExecution mode enum\n\n\nReturns\nstr\nDaisyUI badge color class\n\n\n\n\nsource\n\n\n\n\n extract_plugin_features\n                          (plugin:cjm_fasthtml_plugins.core.metadata.Plugi\n                          nMetadata, config:Optional[Dict[str,Any]]=None)\n\nExtract key features from plugin metadata for display.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nplugin\nPluginMetadata\n\nPlugin metadata\n\n\nconfig\nOptional\nNone\nOptional plugin configuration\n\n\nReturns\nList\n\nList of (label, value, badge_color) tuples",
    "crumbs": [
      "components",
      "Plugin Selector"
    ]
  },
  {
    "objectID": "components/selector.html#metadata-display-helpers",
    "href": "components/selector.html#metadata-display-helpers",
    "title": "Plugin Selector",
    "section": "",
    "text": "Functions to format plugin metadata for display.\n\nsource\n\n\n\n format_execution_mode\n                        (mode:cjm_fasthtml_plugins.core.execution_mode.Plu\n                        ginExecutionMode)\n\nFormat execution mode for display.\n\n\n\n\nType\nDetails\n\n\n\n\nmode\nPluginExecutionMode\nExecution mode enum\n\n\nReturns\nstr\nHuman-readable string\n\n\n\n\nsource\n\n\n\n\n get_execution_badge_color\n                            (mode:cjm_fasthtml_plugins.core.execution_mode\n                            .PluginExecutionMode)\n\nGet badge color for execution mode.\n\n\n\n\nType\nDetails\n\n\n\n\nmode\nPluginExecutionMode\nExecution mode enum\n\n\nReturns\nstr\nDaisyUI badge color class\n\n\n\n\nsource\n\n\n\n\n extract_plugin_features\n                          (plugin:cjm_fasthtml_plugins.core.metadata.Plugi\n                          nMetadata, config:Optional[Dict[str,Any]]=None)\n\nExtract key features from plugin metadata for display.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nplugin\nPluginMetadata\n\nPlugin metadata\n\n\nconfig\nOptional\nNone\nOptional plugin configuration\n\n\nReturns\nList\n\nList of (label, value, badge_color) tuples",
    "crumbs": [
      "components",
      "Plugin Selector"
    ]
  },
  {
    "objectID": "components/selector.html#plugin-details-display",
    "href": "components/selector.html#plugin-details-display",
    "title": "Plugin Selector",
    "section": "Plugin Details Display",
    "text": "Plugin Details Display\nShow detailed information about the selected plugin.\n\nsource\n\nrender_plugin_details\n\n render_plugin_details\n                        (plugin:cjm_fasthtml_plugins.core.metadata.PluginM\n                        etadata, config:Optional[Dict[str,Any]]=None)\n\nRender detailed information about a plugin.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nplugin\nPluginMetadata\n\nPlugin to display\n\n\nconfig\nOptional\nNone\nOptional plugin configuration\n\n\nReturns\nFT\n\nCard element with plugin details",
    "crumbs": [
      "components",
      "Plugin Selector"
    ]
  },
  {
    "objectID": "components/selector.html#dropdown-selector-strategy",
    "href": "components/selector.html#dropdown-selector-strategy",
    "title": "Plugin Selector",
    "section": "Dropdown Selector Strategy",
    "text": "Dropdown Selector Strategy\nThe primary UI pattern: dropdown selection with details panel.\n\nsource\n\nrender_dropdown_selector\n\n render_dropdown_selector\n                           (plugins:List[cjm_fasthtml_plugins.core.metadat\n                           a.PluginMetadata],\n                           selected_plugin_id:Optional[str]=None,\n                           selection_endpoint:str=None,\n                           details_endpoint:Optional[str]=None,\n                           target_id:str=None, label:str='Select Plugin',\n                           confirm_button_text:str='Continue with Selected\n                           Plugin', get_plugin_config:Optional[Callable[[s\n                           tr],Dict[str,Any]]]=None,\n                           show_comparison_toggle:bool=True)\n\n*Render plugin selector with dropdown and details panel.\nThe dropdown updates the details panel for browsing, while an explicit button confirms the selection and proceeds to the next step.*\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nplugins\nList\n\nAvailable plugins\n\n\nselected_plugin_id\nOptional\nNone\nCurrently selected plugin ID\n\n\nselection_endpoint\nstr\nNone\nHTMX endpoint for confirming selection\n\n\ndetails_endpoint\nOptional\nNone\nHTMX endpoint for updating details (optional)\n\n\ntarget_id\nstr\nNone\nHTMX target element ID for final selection\n\n\nlabel\nstr\nSelect Plugin\nLabel for the dropdown\n\n\nconfirm_button_text\nstr\nContinue with Selected Plugin\nText for confirmation button\n\n\nget_plugin_config\nOptional\nNone\nFunction to get plugin config\n\n\nshow_comparison_toggle\nbool\nTrue\nWhether to show comparison table toggle\n\n\nReturns\nFT\n\nComplete plugin selector UI",
    "crumbs": [
      "components",
      "Plugin Selector"
    ]
  },
  {
    "objectID": "components/selector.html#comparison-table-strategy",
    "href": "components/selector.html#comparison-table-strategy",
    "title": "Plugin Selector",
    "section": "Comparison Table Strategy",
    "text": "Comparison Table Strategy\nShow all plugins in a comparison table.\n\nsource\n\nrender_comparison_table\n\n render_comparison_table\n                          (plugins:List[cjm_fasthtml_plugins.core.metadata\n                          .PluginMetadata],\n                          selected_plugin_id:Optional[str]=None, get_plugi\n                          n_config:Optional[Callable[[str],Dict[str,Any]]]\n                          =None)\n\nRender a comparison table of all plugins.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nplugins\nList\n\nPlugins to compare\n\n\nselected_plugin_id\nOptional\nNone\nCurrently selected plugin ID\n\n\nget_plugin_config\nOptional\nNone\nFunction to get plugin config\n\n\nReturns\nFT\n\nTable element with plugin comparison",
    "crumbs": [
      "components",
      "Plugin Selector"
    ]
  },
  {
    "objectID": "components/selector.html#main-selector-function",
    "href": "components/selector.html#main-selector-function",
    "title": "Plugin Selector",
    "section": "Main Selector Function",
    "text": "Main Selector Function\nFactory function that routes to different strategies.\n\nsource\n\nrender_plugin_selector\n\n render_plugin_selector\n                         (plugins:List[cjm_fasthtml_plugins.core.metadata.\n                         PluginMetadata],\n                         selected_plugin_id:Optional[str]=None,\n                         selection_endpoint:str=None, target_id:str=None,\n                         strategy:str='dropdown', get_plugin_config:Option\n                         al[Callable[[str],Dict[str,Any]]]=None, **kwargs)\n\n*Render plugin selector with the specified UI strategy.\nStrategies: - “dropdown”: Dropdown selector with details panel (default) - “comparison”: Comparison table of all plugins*\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nplugins\nList\n\nAvailable plugins\n\n\nselected_plugin_id\nOptional\nNone\nCurrently selected plugin ID\n\n\nselection_endpoint\nstr\nNone\nHTMX endpoint for selection\n\n\ntarget_id\nstr\nNone\nHTMX target element ID\n\n\nstrategy\nstr\ndropdown\nUI strategy: “dropdown” or “comparison”\n\n\nget_plugin_config\nOptional\nNone\nFunction to get plugin config\n\n\nkwargs\nVAR_KEYWORD\n\n\n\n\nReturns\nFT\n\nPlugin selector UI",
    "crumbs": [
      "components",
      "Plugin Selector"
    ]
  },
  {
    "objectID": "components/selector.html#examples",
    "href": "components/selector.html#examples",
    "title": "Plugin Selector",
    "section": "Examples",
    "text": "Examples\n\n# Example: Create sample plugins\nfrom cjm_fasthtml_plugins.core.execution_mode import PluginExecutionMode\n\nsample_plugins = [\n    PluginMetadata(\n        name=\"whisper_tiny\",\n        category=\"transcription\",\n        title=\"Whisper Tiny\",\n        description=\"Fast, lightweight transcription model\",\n        config_schema={\"type\": \"object\", \"properties\": {\"device\": {\"type\": \"string\"}}},\n        version=\"1.0.0\",\n        is_configured=True,\n        execution_mode=PluginExecutionMode.IN_PROCESS\n    ),\n    PluginMetadata(\n        name=\"whisper_large\",\n        category=\"transcription\",\n        title=\"Whisper Large\",\n        description=\"High-quality transcription model\",\n        config_schema={\"type\": \"object\", \"properties\": {\"device\": {\"type\": \"string\"}}},\n        version=\"2.0.0\",\n        is_configured=True,\n        execution_mode=PluginExecutionMode.SUBPROCESS\n    )\n]\n\n# Mock config getter\ndef mock_get_config(plugin_id: str) -&gt; Dict[str, Any]:\n    return {\"device\": \"cuda\", \"supports_streaming\": True}\n\n# Render dropdown selector\nselector = render_plugin_selector(\n    plugins=sample_plugins,\n    selected_plugin_id=\"transcription_whisper_tiny\",\n    selection_endpoint=\"/transcription/select\",\n    target_id=\"transcription-content\",\n    get_plugin_config=mock_get_config\n)\n\nselector\n\n&lt;div id=\"plugin-selector\"&gt;\n  &lt;div class=\"mb-4\"&gt;\n&lt;label class=\"font-semibold mb-2\"&gt;Select Plugin&lt;/label&gt;&lt;select name=\"plugin_id\" id=\"plugin-select\" class=\"select w-full\"&gt;&lt;option value=\"transcription_whisper_tiny\" selected&gt;Whisper Tiny&lt;/option&gt;&lt;option value=\"transcription_whisper_large\"&gt;Whisper Large&lt;/option&gt;&lt;/select&gt;  &lt;/div&gt;\n  &lt;div id=\"plugin-details\" class=\"card bg-base-200 mt-4\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;h3 class=\"card-title\"&gt;Whisper Tiny&lt;/h3&gt;\n      &lt;p class=\"text-base-content/80 text-sm mb-4\"&gt;Fast, lightweight transcription model&lt;/p&gt;\n      &lt;div class=\"mb-4\"&gt;\n        &lt;div class=\"flex items-center mb-2\"&gt;\n&lt;span class=\"font-medium text-base-content/70 text-sm\"&gt;Execution:&lt;/span&gt;&lt;span class=\"badge badge-success badge-sm ml-2\"&gt;Local (In-Process)&lt;/span&gt;        &lt;/div&gt;\n        &lt;div class=\"flex items-center mb-2\"&gt;\n&lt;span class=\"font-medium text-base-content/70 text-sm\"&gt;Device:&lt;/span&gt;&lt;span class=\"badge badge-primary badge-sm ml-2\"&gt;CUDA&lt;/span&gt;        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;p class=\"text-base-content/60 text-xs\"&gt;Version: 1.0.0&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"mt-4\"&gt;\n&lt;button hx-post=\"/transcription/select\" hx-swap=\"innerHTML\" hx-include=\"#plugin-select\" hx-target=\"#transcription-content\" class=\"btn btn-primary btn-md mt-4\"&gt;Continue with Selected Plugin&lt;/button&gt;  &lt;/div&gt;\n  &lt;div class=\"mt-2\"&gt;\n&lt;button hx-get=\"/transcription/compare\" hx-swap=\"innerHTML\" hx-target=\"#plugin-comparison\" class=\"btn btn-outline btn-sm mt-2\"&gt;Compare All Plugins&lt;/button&gt;  &lt;/div&gt;\n  &lt;div id=\"plugin-comparison\" class=\"mt-4\"&gt;&lt;/div&gt;\n&lt;/div&gt;",
    "crumbs": [
      "components",
      "Plugin Selector"
    ]
  },
  {
    "objectID": "protocols/cloud_aware.html",
    "href": "protocols/cloud_aware.html",
    "title": "Cloud-Aware Protocol",
    "section": "",
    "text": "This protocol defines the interface for plugins that execute on cloud or remote resources.\nUse cases: - Cloud GPU rental (Lambda Labs, RunPod, Vast.ai) - Cloud VMs (AWS EC2, GCP Compute) - Cloud containers (AWS ECS, Cloud Run) - Remote SSH execution\nPlugins implementing this protocol enable: - Cost tracking and estimation - Resource provisioning and termination - Status monitoring - Budget enforcement\n\nsource\n\n\n\n CloudAwarePlugin (*args, **kwargs)\n\nProtocol for plugins that use cloud/remote resources.",
    "crumbs": [
      "protocols",
      "Cloud-Aware Protocol"
    ]
  },
  {
    "objectID": "protocols/cloud_aware.html#cloud-aware-plugin-protocol",
    "href": "protocols/cloud_aware.html#cloud-aware-plugin-protocol",
    "title": "Cloud-Aware Protocol",
    "section": "",
    "text": "This protocol defines the interface for plugins that execute on cloud or remote resources.\nUse cases: - Cloud GPU rental (Lambda Labs, RunPod, Vast.ai) - Cloud VMs (AWS EC2, GCP Compute) - Cloud containers (AWS ECS, Cloud Run) - Remote SSH execution\nPlugins implementing this protocol enable: - Cost tracking and estimation - Resource provisioning and termination - Status monitoring - Budget enforcement\n\nsource\n\n\n\n CloudAwarePlugin (*args, **kwargs)\n\nProtocol for plugins that use cloud/remote resources.",
    "crumbs": [
      "protocols",
      "Cloud-Aware Protocol"
    ]
  },
  {
    "objectID": "protocols/cloud_aware.html#example-implementation",
    "href": "protocols/cloud_aware.html#example-implementation",
    "title": "Cloud-Aware Protocol",
    "section": "Example Implementation",
    "text": "Example Implementation\nHere’s a mock cloud-based plugin:\n\n# Example: Mock cloud plugin\nfrom cjm_fasthtml_plugins.core.execution_mode import CloudProviderType\n\nclass MockCloudPlugin:\n    \"\"\"Mock plugin that uses cloud resources.\"\"\"\n    \n    def __init__(self):\n        self.remote_resource: Optional[RemoteResourceInfo] = None\n    \n    # Implement CloudAwarePlugin protocol\n    \n    def get_remote_resource_info(self) -&gt; Optional[RemoteResourceInfo]:\n        return self.remote_resource\n    \n    def provision_remote_resource(self, **config) -&gt; RemoteResourceInfo:\n        print(\"Provisioning cloud GPU instance...\")\n        \n        # Mock provisioning\n        self.remote_resource = RemoteResourceInfo(\n            provider=CloudProviderType.LAMBDA_LABS,\n            instance_id=\"0x1a2b3c4d\",\n            resource_type=\"4x_A100\",\n            gpu_count=4,\n            gpu_type=\"A100\",\n            status=\"running\",\n            estimated_cost_per_hour=4.40,\n            ssh_host=\"54.123.45.67\",\n            region=\"us-west-1\"\n        )\n        \n        print(f\"Provisioned: {self.remote_resource.resource_type}\")\n        return self.remote_resource\n    \n    def check_remote_resource_status(self) -&gt; str:\n        if not self.remote_resource:\n            return \"not_provisioned\"\n        return self.remote_resource.status\n    \n    def terminate_remote_resource(self) -&gt; bool:\n        if self.remote_resource:\n            print(f\"Terminating instance: {self.remote_resource.instance_id}\")\n            self.remote_resource.status = \"terminated\"\n            return True\n        return False\n    \n    def estimate_cost(self, duration_hours: float) -&gt; float:\n        if not self.remote_resource:\n            return 0.0\n        hourly = self.remote_resource.estimated_cost_per_hour or 0.0\n        return duration_hours * hourly\n\n\n# Test the mock plugin\nplugin = MockCloudPlugin()\n\n# Check it implements the protocol\nprint(f\"Implements protocol: {isinstance(plugin, CloudAwarePlugin)}\")\n\n# Check initial state\nprint(f\"\\nInitial status: {plugin.check_remote_resource_status()}\")\nprint(f\"Resource info: {plugin.get_remote_resource_info()}\")\n\n# Provision resources\nresource = plugin.provision_remote_resource()\nprint(f\"\\nAfter provisioning:\")\nprint(f\"  Status: {plugin.check_remote_resource_status()}\")\nprint(f\"  Provider: {resource.provider.value}\")\nprint(f\"  GPUs: {resource.gpu_count}x {resource.gpu_type}\")\nprint(f\"  Cost: ${resource.estimated_cost_per_hour}/hour\")\n\n# Estimate costs\ncost_1hr = plugin.estimate_cost(1.0)\ncost_8hr = plugin.estimate_cost(8.0)\nprint(f\"\\nCost estimates:\")\nprint(f\"  1 hour: ${cost_1hr:.2f}\")\nprint(f\"  8 hours: ${cost_8hr:.2f}\")\n\n# Terminate\nsuccess = plugin.terminate_remote_resource()\nprint(f\"\\nTermination successful: {success}\")\nprint(f\"Final status: {plugin.check_remote_resource_status()}\")\n\nImplements protocol: True\n\nInitial status: not_provisioned\nResource info: None\nProvisioning cloud GPU instance...\nProvisioned: 4x_A100\n\nAfter provisioning:\n  Status: running\n  Provider: lambda_labs\n  GPUs: 4x A100\n  Cost: $4.4/hour\n\nCost estimates:\n  1 hour: $4.40\n  8 hours: $35.20\nTerminating instance: 0x1a2b3c4d\n\nTermination successful: True\nFinal status: terminated",
    "crumbs": [
      "protocols",
      "Cloud-Aware Protocol"
    ]
  },
  {
    "objectID": "protocols/cloud_aware.html#helper-functions",
    "href": "protocols/cloud_aware.html#helper-functions",
    "title": "Cloud-Aware Protocol",
    "section": "Helper Functions",
    "text": "Helper Functions\nUtilities for working with cloud-aware plugins.\n\nsource\n\nget_total_estimated_cost\n\n get_total_estimated_cost (plugins:List[Any], duration_hours:float=1.0)\n\nGet total estimated cost for multiple plugins.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nplugins\nList\n\nList of plugin instances\n\n\nduration_hours\nfloat\n1.0\nDuration to estimate for\n\n\nReturns\nfloat\n\nTotal estimated cost in USD\n\n\n\n\nsource\n\n\nhas_active_cloud_resources\n\n has_active_cloud_resources (plugin:Any)\n\nCheck if plugin has active cloud resources.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nplugin\nAny\nPlugin instance\n\n\nReturns\nbool\nTrue if plugin has running cloud resources\n\n\n\n\nsource\n\n\nis_cloud_aware\n\n is_cloud_aware (plugin:Any)\n\nCheck if a plugin implements the CloudAwarePlugin protocol.\n\n\n\n\nType\nDetails\n\n\n\n\nplugin\nAny\nPlugin instance to check\n\n\nReturns\nbool\nTrue if plugin implements the protocol\n\n\n\n\n# Test helper functions\nplugin1 = MockCloudPlugin()\nplugin1.provision_remote_resource()\n\nplugin2 = MockCloudPlugin()\nplugin2.provision_remote_resource()\n\nprint(f\"Plugin 1 is cloud aware: {is_cloud_aware(plugin1)}\")\nprint(f\"Plugin 1 has active resources: {has_active_cloud_resources(plugin1)}\")\n\n# Test with multiple plugins\nplugins = [plugin1, plugin2, {\"not\": \"a plugin\"}]\ntotal_cost_1hr = get_total_estimated_cost(plugins, 1.0)\ntotal_cost_24hr = get_total_estimated_cost(plugins, 24.0)\n\nprint(f\"\\nTotal cost for 2 plugins:\")\nprint(f\"  1 hour: ${total_cost_1hr:.2f}\")\nprint(f\"  24 hours: ${total_cost_24hr:.2f}\")\n\n# Terminate resources\nplugin1.terminate_remote_resource()\nplugin2.terminate_remote_resource()\n\nprint(f\"\\nAfter termination:\")\nprint(f\"Plugin 1 has active resources: {has_active_cloud_resources(plugin1)}\")\n\nProvisioning cloud GPU instance...\nProvisioned: 4x_A100\nProvisioning cloud GPU instance...\nProvisioned: 4x_A100\nPlugin 1 is cloud aware: True\nPlugin 1 has active resources: True\n\nTotal cost for 2 plugins:\n  1 hour: $8.80\n  24 hours: $211.20\nTerminating instance: 0x1a2b3c4d\nTerminating instance: 0x1a2b3c4d\n\nAfter termination:\nPlugin 1 has active resources: False",
    "crumbs": [
      "protocols",
      "Cloud-Aware Protocol"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cjm-fasthtml-plugins",
    "section": "",
    "text": "pip install cjm_fasthtml_plugins",
    "crumbs": [
      "cjm-fasthtml-plugins"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "cjm-fasthtml-plugins",
    "section": "",
    "text": "pip install cjm_fasthtml_plugins",
    "crumbs": [
      "cjm-fasthtml-plugins"
    ]
  },
  {
    "objectID": "index.html#project-structure",
    "href": "index.html#project-structure",
    "title": "cjm-fasthtml-plugins",
    "section": "Project Structure",
    "text": "Project Structure\nnbs/\n├── components/ (2)\n│   ├── html_ids.ipynb  # Centralized HTML ID constants for plugin selector components\n│   └── selector.ipynb  # Reusable plugin selection UI components with multiple display strategies\n├── core/ (3)\n│   ├── execution_mode.ipynb  # Enum definitions for plugin execution modes (in-process, subprocess, Docker, cloud, etc.)\n│   ├── metadata.ipynb        # Plugin metadata structures for tracking plugin information and resources\n│   └── registry.ipynb        # Unified plugin registry for managing multiple domain-specific plugin systems with configuration persistence\n├── protocols/ (2)\n│   ├── cloud_aware.ipynb  # Protocol for plugins that use cloud or remote computing resources\n│   └── lifecycle.ipynb    # Protocol for plugins that manage child processes, containers, or other external resources\n└── utils/ (1)\n    └── helpers.ipynb  # Utility functions for plugin registry operations\nTotal: 8 notebooks across 5 directories",
    "crumbs": [
      "cjm-fasthtml-plugins"
    ]
  },
  {
    "objectID": "index.html#module-dependencies",
    "href": "index.html#module-dependencies",
    "title": "cjm-fasthtml-plugins",
    "section": "Module Dependencies",
    "text": "Module Dependencies\ngraph LR\n    components_html_ids[components.html_ids&lt;br/&gt;HTML IDs]\n    components_selector[components.selector&lt;br/&gt;Plugin Selector]\n    core_execution_mode[core.execution_mode&lt;br/&gt;Execution Mode]\n    core_metadata[core.metadata&lt;br/&gt;Metadata]\n    core_registry[core.registry&lt;br/&gt;Registry]\n    protocols_cloud_aware[protocols.cloud_aware&lt;br/&gt;Cloud-Aware Protocol]\n    protocols_lifecycle[protocols.lifecycle&lt;br/&gt;Lifecycle Protocol]\n    utils_helpers[utils.helpers&lt;br/&gt;Helpers]\n\n    components_selector --&gt; core_execution_mode\n    components_selector --&gt; components_html_ids\n    components_selector --&gt; core_metadata\n    core_metadata --&gt; core_execution_mode\n    core_registry --&gt; core_metadata\n    core_registry --&gt; core_execution_mode\n    protocols_cloud_aware --&gt; core_metadata\n    protocols_cloud_aware --&gt; core_execution_mode\n    protocols_lifecycle --&gt; core_execution_mode\n    utils_helpers --&gt; core_metadata\n    utils_helpers --&gt; core_execution_mode\n11 cross-module dependencies detected",
    "crumbs": [
      "cjm-fasthtml-plugins"
    ]
  },
  {
    "objectID": "index.html#cli-reference",
    "href": "index.html#cli-reference",
    "title": "cjm-fasthtml-plugins",
    "section": "CLI Reference",
    "text": "CLI Reference\nNo CLI commands found in this project.",
    "crumbs": [
      "cjm-fasthtml-plugins"
    ]
  },
  {
    "objectID": "index.html#module-overview",
    "href": "index.html#module-overview",
    "title": "cjm-fasthtml-plugins",
    "section": "Module Overview",
    "text": "Module Overview\nDetailed documentation for each module in the project:\n\nCloud-Aware Protocol (cloud_aware.ipynb)\n\nProtocol for plugins that use cloud or remote computing resources\n\n\nImport\nfrom cjm_fasthtml_plugins.protocols.cloud_aware import (\n    CloudAwarePlugin,\n    is_cloud_aware,\n    has_active_cloud_resources,\n    get_total_estimated_cost\n)\n\n\nFunctions\ndef is_cloud_aware(plugin: Any  # Plugin instance to check\n                  ) -&gt; bool:  # True if plugin implements the protocol\n    \"Check if a plugin implements the CloudAwarePlugin protocol.\"\ndef has_active_cloud_resources(plugin: Any  # Plugin instance\n                               ) -&gt; bool:  # True if plugin has running cloud resources\n    \"Check if plugin has active cloud resources.\"\ndef get_total_estimated_cost(plugins: List[Any],  # List of plugin instances\n                            duration_hours: float = 1.0  # Duration to estimate for\n                           ) -&gt; float:  # Total estimated cost in USD\n    \"Get total estimated cost for multiple plugins.\"\n\n\nClasses\n@runtime_checkable\nclass CloudAwarePlugin(Protocol):\n    \"Protocol for plugins that use cloud/remote resources.\"\n    \n    def get_remote_resource_info(self) -&gt; Optional[RemoteResourceInfo]:  # RemoteResourceInfo if resources are provisioned, None otherwise\n            \"\"\"Get information about remote/cloud resources.\"\"\"\n            ...\n        \n        def provision_remote_resource(self, **config) -&gt; RemoteResourceInfo:  # RemoteResourceInfo with details about provisioned resource\n        \"Get information about remote/cloud resources.\"\n    \n    def provision_remote_resource(self, **config) -&gt; RemoteResourceInfo:  # RemoteResourceInfo with details about provisioned resource\n            \"\"\"Provision cloud resources (VM, container, etc.).\"\"\"\n            ...\n        \n        def check_remote_resource_status(self) -&gt; str:  # Status string (e.g., 'running', 'stopped', 'provisioning')\n        \"Provision cloud resources (VM, container, etc.).\"\n    \n    def check_remote_resource_status(self) -&gt; str:  # Status string (e.g., 'running', 'stopped', 'provisioning')\n            \"\"\"Check status of remote resource.\"\"\"\n            ...\n        \n        def terminate_remote_resource(self) -&gt; bool:  # True if termination succeeded\n        \"Check status of remote resource.\"\n    \n    def terminate_remote_resource(self) -&gt; bool:  # True if termination succeeded\n            \"\"\"Terminate/stop cloud resources to avoid costs.\"\"\"\n            ...\n        \n        def estimate_cost(self, \n                         duration_hours: float  # Estimated runtime in hours\n                        ) -&gt; float:  # Estimated cost in USD\n        \"Terminate/stop cloud resources to avoid costs.\"\n    \n    def estimate_cost(self,\n                         duration_hours: float  # Estimated runtime in hours\n                        ) -&gt; float:  # Estimated cost in USD\n        \"Estimate cost for running this duration.\"\n\n\n\nExecution Mode (execution_mode.ipynb)\n\nEnum definitions for plugin execution modes (in-process, subprocess, Docker, cloud, etc.)\n\n\nImport\nfrom cjm_fasthtml_plugins.core.execution_mode import (\n    PluginExecutionMode,\n    CloudProviderType\n)\n\n\nClasses\nclass PluginExecutionMode(Enum):\n    \"Categorizes plugins by their execution environment, from in-process to cloud deployments.\"\nclass CloudProviderType(Enum):\n    \"Cloud providers and GPU rental services for remote execution.\"\n\n\n\nHelpers (helpers.ipynb)\n\nUtility functions for plugin registry operations\n\n\nImport\nfrom cjm_fasthtml_plugins.utils.helpers import (\n    filter_plugins_by_execution_mode,\n    get_cloud_plugins,\n    get_local_plugins,\n    get_configured_plugins,\n    get_unconfigured_plugins,\n    get_plugin_stats\n)\n\n\nFunctions\ndef filter_plugins_by_execution_mode(\n    plugins: List[PluginMetadata],  # List of plugin metadata\n    mode: PluginExecutionMode  # Execution mode to filter by\n) -&gt; List[PluginMetadata]:  # Filtered list\n    \"Filter plugins by execution mode.\"\ndef get_cloud_plugins(plugins: List[PluginMetadata]  # List of plugin metadata\n                     ) -&gt; List[PluginMetadata]:  # List of cloud/remote plugins\n    \"Get all cloud/remote execution plugins.\"\ndef get_local_plugins(plugins: List[PluginMetadata]  # List of plugin metadata\n                     ) -&gt; List[PluginMetadata]:  # List of local plugins\n    \"Get all local execution plugins.\"\ndef get_configured_plugins(plugins: List[PluginMetadata]  # List of plugin metadata\n                          ) -&gt; List[PluginMetadata]:  # List of configured plugins\n    \"Get plugins that have saved configuration.\"\ndef get_unconfigured_plugins(plugins: List[PluginMetadata]  # List of plugin metadata\n                            ) -&gt; List[PluginMetadata]:  # List of unconfigured plugins\n    \"Get plugins that need configuration.\"\ndef get_plugin_stats(plugins: List[PluginMetadata]  # List of plugin metadata\n                    ) -&gt; Dict[str, Any]:  # Dictionary with plugin statistics\n    \"Get statistics about a list of plugins.\"\n\n\n\nHTML IDs (html_ids.ipynb)\n\nCentralized HTML ID constants for plugin selector components\n\n\nImport\nfrom cjm_fasthtml_plugins.components.html_ids import (\n    PluginSelectorHtmlIds\n)\n\n\nClasses\nclass PluginSelectorHtmlIds:\n    \"HTML ID constants for plugin selector components.\"\n    \n    def as_selector(\n            id_str: str  # The HTML ID to convert\n        ) -&gt; str:  # CSS selector with # prefix\n        \"Convert an ID to a CSS selector format.\"\n\n\n\nLifecycle Protocol (lifecycle.ipynb)\n\nProtocol for plugins that manage child processes, containers, or other external resources\n\n\nImport\nfrom cjm_fasthtml_plugins.protocols.lifecycle import (\n    LifecycleAwarePlugin,\n    is_lifecycle_aware,\n    get_all_managed_pids\n)\n\n\nFunctions\ndef is_lifecycle_aware(plugin: Any  # Plugin instance to check\n                      ) -&gt; bool:  # True if plugin implements the protocol\n    \"Check if a plugin implements the LifecycleAwarePlugin protocol.\"\ndef get_all_managed_pids(plugin: Any  # Plugin instance\n                        ) -&gt; List[int]:  # List of all PIDs (empty if plugin not lifecycle-aware)\n    \"Get all PIDs managed by a plugin (including children).\"\n\n\nClasses\n@runtime_checkable\nclass LifecycleAwarePlugin(Protocol):\n    \"Protocol for plugins that manage external resources like child processes, containers, or cloud resources.\"\n    \n    def get_execution_mode(self) -&gt; PluginExecutionMode:  # PluginExecutionMode indicating how this plugin executes\n            \"\"\"Get the execution mode of this plugin.\"\"\"\n            ...\n        \n        def get_child_pids(self) -&gt; List[int]:  # List of process IDs (empty list if no child processes)\n        \"Get the execution mode of this plugin.\"\n    \n    def get_child_pids(self) -&gt; List[int]:  # List of process IDs (empty list if no child processes)\n            \"\"\"Get PIDs of any child processes managed by this plugin.\"\"\"\n            ...\n        \n        def get_managed_resources(self) -&gt; Dict[str, Any]:  # Dictionary with resource information\n        \"Get PIDs of any child processes managed by this plugin.\"\n    \n    def get_managed_resources(self) -&gt; Dict[str, Any]:  # Dictionary with resource information\n            \"\"\"Get information about managed resources (server URLs, container IDs, conda envs, etc.).\"\"\"\n            ...\n        \n        def force_cleanup(self) -&gt; None\n        \"Get information about managed resources (server URLs, container IDs, conda envs, etc.).\"\n    \n    def force_cleanup(self) -&gt; None\n        \"Force cleanup of all managed resources (kill processes, stop containers, etc.).\"\n\n\n\nMetadata (metadata.ipynb)\n\nPlugin metadata structures for tracking plugin information and resources\n\n\nImport\nfrom cjm_fasthtml_plugins.core.metadata import (\n    RemoteResourceInfo,\n    PluginMetadata\n)\n\n\nClasses\n@dataclass\nclass RemoteResourceInfo:\n    \"Information about a remote/cloud resource used by a plugin.\"\n    \n    provider: CloudProviderType  # Cloud provider or service\n    region: Optional[str]  # Cloud region/zone\n    instance_id: Optional[str]  # VM/instance identifier\n    job_id: Optional[str]  # Job/task identifier on remote system\n    endpoint_url: Optional[str]  # HTTP endpoint for API access\n    ssh_host: Optional[str]  # SSH host for remote access\n    ssh_port: int = 22  # SSH port number\n    status: str = 'unknown'  # Current status (provisioning, running, stopping, stopped)\n    resource_type: Optional[str]  # Instance type (e.g., 'p3.2xlarge', 'n1-standard-8')\n    gpu_count: int = 0  # Number of GPUs\n    gpu_type: Optional[str]  # GPU model (e.g., 'V100', 'A100', 'H100')\n    estimated_cost_per_hour: Optional[float]  # Estimated hourly cost in USD\n    metadata: Dict[str, Any] = field(...)  # Additional provider-specific metadata\n@dataclass\nclass PluginMetadata:\n    \"Metadata describing a plugin for display and resource management without loading the plugin instance.\"\n    \n    name: str  # Internal plugin identifier\n    category: str  # Plugin category string (application-defined)\n    title: str  # Display title for the plugin\n    config_schema: Dict[str, Any]  # JSON Schema for plugin configuration\n    description: Optional[str]  # Plugin description\n    version: Optional[str]  # Plugin version\n    is_configured: bool = False  # Whether the plugin has saved configuration\n    execution_mode: PluginExecutionMode = PluginExecutionMode.IN_PROCESS  # How the plugin executes\n    manages_child_processes: bool = False  # Whether plugin spawns child processes\n    manages_external_resources: bool = False  # Whether plugin manages Docker/servers/etc.\n    spawned_pids: List[int] = field(...)  # List of child process PIDs\n    container_id: Optional[str]  # Docker container ID if applicable\n    conda_env_name: Optional[str]  # Conda environment name if applicable\n    remote_resource: Optional[RemoteResourceInfo]  # Remote resource information if applicable\n    \n    def get_unique_id(self) -&gt; str:  # String in format 'category_name'\n            \"\"\"Generate unique ID for this plugin.\"\"\"\n            return f\"{self.category}_{self.name}\"\n        \n        def is_local_execution(self) -&gt; bool:  # True if execution is local\n        \"Generate unique ID for this plugin.\"\n    \n    def is_local_execution(self) -&gt; bool:  # True if execution is local\n            \"\"\"Check if plugin executes locally (not cloud/remote).\"\"\"\n            local_modes = {\n                PluginExecutionMode.IN_PROCESS,\n                PluginExecutionMode.SUBPROCESS,\n                PluginExecutionMode.DOCKER,\n                PluginExecutionMode.CONDA_ENV,\n                PluginExecutionMode.EXTERNAL_SERVICE\n            }\n            return self.execution_mode in local_modes\n        \n        def is_cloud_execution(self) -&gt; bool:  # True if execution is cloud/remote\n        \"Check if plugin executes locally (not cloud/remote).\"\n    \n    def is_cloud_execution(self) -&gt; bool:  # True if execution is cloud/remote\n            \"\"\"Check if plugin executes on cloud/remote resources.\"\"\"\n            return not self.is_local_execution()\n        \n        def has_active_resources(self) -&gt; bool:  # True if plugin has child processes, containers, or cloud resources\n        \"Check if plugin executes on cloud/remote resources.\"\n    \n    def has_active_resources(self) -&gt; bool:  # True if plugin has child processes, containers, or cloud resources\n        \"Check if plugin has active managed resources.\"\n\n\n\nRegistry (registry.ipynb)\n\nUnified plugin registry for managing multiple domain-specific plugin systems with configuration persistence\n\n\nImport\nfrom cjm_fasthtml_plugins.core.registry import (\n    T,\n    UnifiedPluginRegistry\n)\n\n\nClasses\nclass UnifiedPluginRegistry:\n    def __init__(self, \n                 config_dir: Optional[Path] = None  # Directory for plugin configuration files (default: 'configs')\n                )\n    \"Unified registry for multiple domain-specific plugin systems with configuration persistence.\"\n    \n    def __init__(self,\n                     config_dir: Optional[Path] = None  # Directory for plugin configuration files (default: 'configs')\n                    )\n        \"Initialize the unified plugin registry.\"\n    \n    def register_plugin_manager(\n            self,\n            category: str,  # Category name (e.g., \"transcription\", \"llm\")\n            manager: Any,  # Domain-specific plugin manager\n            display_name: Optional[str] = None,  # Display name for UI\n            auto_discover: bool = True  # Automatically discover plugins?\n        ) -&gt; List[PluginMetadata]:  # List of discovered plugin metadata\n        \"Register a domain-specific plugin manager.\"\n    \n    def register_plugin_system(\n            self,\n            category: str,  # Category name (e.g., \"transcription\", \"llm\")\n            plugin_interface: Type,  # Plugin interface class (e.g., TranscriptionPlugin)\n            display_name: Optional[str] = None,  # Display name for UI\n            auto_discover: bool = True  # Automatically discover plugins?\n        ) -&gt; List[PluginMetadata]:  # List of discovered plugin metadata\n        \"Create and register a plugin system in one step.\n\nThis is a convenience method that creates a PluginManager with the\nspecified interface and registers it with the registry.\n\nExample:\n    ```python\n    from cjm_transcription_plugin_system.plugin_interface import TranscriptionPlugin\n    \n    registry = UnifiedPluginRegistry()\n    \n    # Instead of:\n    # manager = PluginManager(plugin_interface=TranscriptionPlugin)\n    # registry.register_plugin_manager(category=\"transcription\", manager=manager)\n    \n    # Do this:\n    registry.register_plugin_system(\n        category=\"transcription\",\n        plugin_interface=TranscriptionPlugin,\n        display_name=\"Transcription\"\n    )\n    ```\n\nReturns:\n    List of discovered plugin metadata\"\n    \n    def get_manager(\n            self,\n            category: str,  # Category name\n            manager_type: Optional[Type[T]] = None  # Optional type hint for IDE autocomplete\n        ) -&gt; Optional[T]:  # Plugin manager instance\n        \"Get plugin manager for a specific category.\"\n    \n    def get_categories(self) -&gt; List[str]:  # Sorted list of category names\n            \"\"\"Get all registered categories.\"\"\"\n            return sorted(self._categories.keys())\n        \n        def get_category_display_name(self, \n                                       category: str  # Category name\n                                      ) -&gt; str:  # Display name or category name if not set\n        \"Get all registered categories.\"\n    \n    def get_category_display_name(self,\n                                       category: str  # Category name\n                                      ) -&gt; str:  # Display name or category name if not set\n        \"Get display name for a category.\"\n    \n    def get_plugin(self,\n                       unique_id: str  # Plugin unique identifier (format: 'category_name')\n                      ) -&gt; Optional[PluginMetadata]:  # Plugin metadata if found, None otherwise\n        \"Get plugin metadata by unique ID.\"\n    \n    def get_plugins_by_category(self,\n                                    category: str  # Category name\n                                   ) -&gt; List[PluginMetadata]:  # List of plugin metadata for the category\n        \"Get all plugins in a category.\"\n    \n    def get_all_plugins(self) -&gt; List[PluginMetadata]:  # List of all plugin metadata\n            \"\"\"Get all plugins across all categories.\"\"\"\n            return list(self._plugins.values())\n        \n        def get_categories_with_plugins(self) -&gt; List[str]:  # Sorted list of categories with plugins\n        \"Get all plugins across all categories.\"\n    \n    def get_categories_with_plugins(self) -&gt; List[str]:  # Sorted list of categories with plugins\n            \"\"\"Get categories that have registered plugins.\"\"\"\n            categories = set(p.category for p in self._plugins.values())\n            return sorted(categories)\n        \n        def load_plugin_config(self, \n                              unique_id: str  # Plugin unique identifier\n                             ) -&gt; Dict[str, Any]:  # Configuration dictionary (empty if no config exists)\n        \"Get categories that have registered plugins.\"\n    \n    def load_plugin_config(self,\n                              unique_id: str  # Plugin unique identifier\n                             ) -&gt; Dict[str, Any]:  # Configuration dictionary (empty if no config exists)\n        \"Load saved configuration for a plugin.\"\n    \n    def save_plugin_config(self,\n                              unique_id: str,  # Plugin unique identifier\n                              config: Dict[str, Any]  # Configuration dictionary to save\n                             ) -&gt; bool:  # True if save succeeded, False otherwise\n        \"Save configuration for a plugin.\"\n    \n    def delete_plugin_config(self,\n                                unique_id: str  # Plugin unique identifier\n                               ) -&gt; bool:  # True if deletion succeeded, False otherwise\n        \"Delete saved configuration for a plugin.\"\n\n\nVariables\nT\n\n\n\nPlugin Selector (selector.ipynb)\n\nReusable plugin selection UI components with multiple display strategies\n\n\nImport\nfrom cjm_fasthtml_plugins.components.selector import (\n    format_execution_mode,\n    get_execution_badge_color,\n    extract_plugin_features,\n    render_plugin_details,\n    render_dropdown_selector,\n    render_comparison_table,\n    render_plugin_selector\n)\n\n\nFunctions\ndef format_execution_mode(\n    mode: PluginExecutionMode  # Execution mode enum\n) -&gt; str:  # Human-readable string\n    \"Format execution mode for display.\"\ndef get_execution_badge_color(\n    mode: PluginExecutionMode  # Execution mode enum\n) -&gt; str:  # DaisyUI badge color class\n    \"Get badge color for execution mode.\"\ndef extract_plugin_features(\n    plugin: PluginMetadata,  # Plugin metadata\n    config: Optional[Dict[str, Any]] = None  # Optional plugin configuration\n) -&gt; List[tuple]:  # List of (label, value, badge_color) tuples\n    \"Extract key features from plugin metadata for display.\"\ndef render_plugin_details(\n    plugin: PluginMetadata,  # Plugin to display\n    config: Optional[Dict[str, Any]] = None  # Optional plugin configuration\n) -&gt; FT:  # Card element with plugin details\n    \"Render detailed information about a plugin.\"\ndef render_dropdown_selector(\n    plugins: List[PluginMetadata],  # Available plugins\n    selected_plugin_id: Optional[str] = None,  # Currently selected plugin ID\n    selection_endpoint: str = None,  # HTMX endpoint for confirming selection\n    details_endpoint: Optional[str] = None,  # HTMX endpoint for updating details (optional)\n    target_id: str = None,  # HTMX target element ID for final selection\n    label: str = \"Select Plugin\",  # Label for the dropdown\n    confirm_button_text: str = \"Continue with Selected Plugin\",  # Text for confirmation button\n    get_plugin_config: Optional[Callable[[str], Dict[str, Any]]] = None,  # Function to get plugin config\n    show_comparison_toggle: bool = True  # Whether to show comparison table toggle\n) -&gt; FT:  # Complete plugin selector UI\n    \"\"\"\n    Render plugin selector with dropdown and details panel.\n    \n    The dropdown updates the details panel for browsing, while an explicit\n    button confirms the selection and proceeds to the next step.\n    \"\"\"\ndef render_comparison_table(\n    plugins: List[PluginMetadata],  # Plugins to compare\n    selected_plugin_id: Optional[str] = None,  # Currently selected plugin ID\n    get_plugin_config: Optional[Callable[[str], Dict[str, Any]]] = None  # Function to get plugin config\n) -&gt; FT:  # Table element with plugin comparison\n    \"Render a comparison table of all plugins.\"\ndef render_plugin_selector(\n    plugins: List[PluginMetadata],  # Available plugins\n    selected_plugin_id: Optional[str] = None,  # Currently selected plugin ID\n    selection_endpoint: str = None,  # HTMX endpoint for selection\n    target_id: str = None,  # HTMX target element ID\n    strategy: str = \"dropdown\",  # UI strategy: \"dropdown\" or \"comparison\"\n    get_plugin_config: Optional[Callable[[str], Dict[str, Any]]] = None,  # Function to get plugin config\n    **kwargs  # Additional strategy-specific options\n) -&gt; FT:  # Plugin selector UI\n    \"\"\"\n    Render plugin selector with the specified UI strategy.\n    \n    Strategies:\n    - \"dropdown\": Dropdown selector with details panel (default)\n    - \"comparison\": Comparison table of all plugins\n    \"\"\"",
    "crumbs": [
      "cjm-fasthtml-plugins"
    ]
  },
  {
    "objectID": "core/execution_mode.html",
    "href": "core/execution_mode.html",
    "title": "Execution Mode",
    "section": "",
    "text": "These enums define how plugins execute - from simple in-process execution to complex cloud-based deployments.\n\nsource\n\n\n\n PluginExecutionMode (value, names=None, module=None, qualname=None,\n                      type=None, start=1, boundary=None)\n\nCategorizes plugins by their execution environment, from in-process to cloud deployments.\n\n# Example: Check execution mode values\nprint(\"Local execution modes:\")\nfor mode in [PluginExecutionMode.IN_PROCESS, PluginExecutionMode.SUBPROCESS, PluginExecutionMode.DOCKER]:\n    print(f\"  {mode.name}: {mode.value}\")\n\nprint(\"\\nCloud execution modes:\")\nfor mode in [PluginExecutionMode.CLOUD_VM, PluginExecutionMode.CLOUD_GPU, PluginExecutionMode.CLOUD_SERVERLESS]:\n    print(f\"  {mode.name}: {mode.value}\")\n\nLocal execution modes:\n  IN_PROCESS: in_process\n  SUBPROCESS: subprocess\n  DOCKER: docker\n\nCloud execution modes:\n  CLOUD_VM: cloud_vm\n  CLOUD_GPU: cloud_gpu\n  CLOUD_SERVERLESS: cloud_serverless\n\n\n\n# Example: Categorize execution modes\ndef is_local_execution(mode: PluginExecutionMode) -&gt; bool:\n    \"\"\"Check if execution mode is local (not cloud/remote).\"\"\"\n    local_modes = {\n        PluginExecutionMode.IN_PROCESS,\n        PluginExecutionMode.SUBPROCESS,\n        PluginExecutionMode.DOCKER,\n        PluginExecutionMode.CONDA_ENV,\n        PluginExecutionMode.EXTERNAL_SERVICE\n    }\n    return mode in local_modes\n\ndef is_cloud_execution(mode: PluginExecutionMode) -&gt; bool:\n    \"\"\"Check if execution mode is cloud/remote.\"\"\"\n    return not is_local_execution(mode)\n\n# Test\nprint(f\"IN_PROCESS is local: {is_local_execution(PluginExecutionMode.IN_PROCESS)}\")\nprint(f\"CLOUD_GPU is local: {is_local_execution(PluginExecutionMode.CLOUD_GPU)}\")\nprint(f\"CLOUD_GPU is cloud: {is_cloud_execution(PluginExecutionMode.CLOUD_GPU)}\")\n\nIN_PROCESS is local: True\nCLOUD_GPU is local: False\nCLOUD_GPU is cloud: True",
    "crumbs": [
      "core",
      "Execution Mode"
    ]
  },
  {
    "objectID": "core/execution_mode.html#plugin-execution-modes",
    "href": "core/execution_mode.html#plugin-execution-modes",
    "title": "Execution Mode",
    "section": "",
    "text": "These enums define how plugins execute - from simple in-process execution to complex cloud-based deployments.\n\nsource\n\n\n\n PluginExecutionMode (value, names=None, module=None, qualname=None,\n                      type=None, start=1, boundary=None)\n\nCategorizes plugins by their execution environment, from in-process to cloud deployments.\n\n# Example: Check execution mode values\nprint(\"Local execution modes:\")\nfor mode in [PluginExecutionMode.IN_PROCESS, PluginExecutionMode.SUBPROCESS, PluginExecutionMode.DOCKER]:\n    print(f\"  {mode.name}: {mode.value}\")\n\nprint(\"\\nCloud execution modes:\")\nfor mode in [PluginExecutionMode.CLOUD_VM, PluginExecutionMode.CLOUD_GPU, PluginExecutionMode.CLOUD_SERVERLESS]:\n    print(f\"  {mode.name}: {mode.value}\")\n\nLocal execution modes:\n  IN_PROCESS: in_process\n  SUBPROCESS: subprocess\n  DOCKER: docker\n\nCloud execution modes:\n  CLOUD_VM: cloud_vm\n  CLOUD_GPU: cloud_gpu\n  CLOUD_SERVERLESS: cloud_serverless\n\n\n\n# Example: Categorize execution modes\ndef is_local_execution(mode: PluginExecutionMode) -&gt; bool:\n    \"\"\"Check if execution mode is local (not cloud/remote).\"\"\"\n    local_modes = {\n        PluginExecutionMode.IN_PROCESS,\n        PluginExecutionMode.SUBPROCESS,\n        PluginExecutionMode.DOCKER,\n        PluginExecutionMode.CONDA_ENV,\n        PluginExecutionMode.EXTERNAL_SERVICE\n    }\n    return mode in local_modes\n\ndef is_cloud_execution(mode: PluginExecutionMode) -&gt; bool:\n    \"\"\"Check if execution mode is cloud/remote.\"\"\"\n    return not is_local_execution(mode)\n\n# Test\nprint(f\"IN_PROCESS is local: {is_local_execution(PluginExecutionMode.IN_PROCESS)}\")\nprint(f\"CLOUD_GPU is local: {is_local_execution(PluginExecutionMode.CLOUD_GPU)}\")\nprint(f\"CLOUD_GPU is cloud: {is_cloud_execution(PluginExecutionMode.CLOUD_GPU)}\")\n\nIN_PROCESS is local: True\nCLOUD_GPU is local: False\nCLOUD_GPU is cloud: True",
    "crumbs": [
      "core",
      "Execution Mode"
    ]
  },
  {
    "objectID": "core/execution_mode.html#cloud-provider-types",
    "href": "core/execution_mode.html#cloud-provider-types",
    "title": "Execution Mode",
    "section": "Cloud Provider Types",
    "text": "Cloud Provider Types\nFor cloud-based execution modes, we also track which cloud provider is being used.\n\nsource\n\nCloudProviderType\n\n CloudProviderType (value, names=None, module=None, qualname=None,\n                    type=None, start=1, boundary=None)\n\nCloud providers and GPU rental services for remote execution.\n\n# Example: List all supported providers\nprint(\"Supported cloud providers:\")\nfor provider in CloudProviderType:\n    print(f\"  - {provider.value}\")\n\nSupported cloud providers:\n  - aws\n  - gcp\n  - azure\n  - lambda_labs\n  - runpod\n  - vast_ai\n  - paperspace\n  - together_ai\n  - custom",
    "crumbs": [
      "core",
      "Execution Mode"
    ]
  }
]